services:

  api:
    build: api/
    # do not publish any ports, will be reverse-proxied
    expose:
      - 3000
    networks:
      - net
      - default
    env_file:
      - .env
    environment:
      - PAYLOAD_SECRET=${PAYLOAD_SECRET}
      - VIRTUAL_HOST=${DOMAIN_API}
      - LETSENCRYPT_HOST=${DOMAIN_API}
      - LETSENCRYPT_EMAIL=${EMAIL}
    
  ui:
    # do not publish any ports, will be reverse-proxied
    expose:
      - 80
    networks:
      - net
      - default
    env_file:
      - .env
    environment:
      - VITE_APP_DOMAIN_API=${DOMAIN_API}
      - VIRTUAL_HOST=${DOMAIN_UI}
      - LETSENCRYPT_HOST=${DOMAIN_UI}
      - LETSENCRYPT_EMAIL=${EMAIL}

  proxy:
    container_name: "proxy"
    image: "jwilder/nginx-proxy:latest" # alpine?
    volumes:
        - "html:/usr/share/nginx/html"
        - "dhparam:/etc/nginx/dhparam"
        - "vhost:/etc/nginx/vhost.d"
        - "certs:/etc/nginx/certs"
        - "/run/docker.sock:/tmp/docker.sock:ro"
    restart: "always"
    networks: 
        - "net"
    ports:
        - "80:80"
        - "443:443"
  
  letsencrypt:
    container_name: "letsencrypt"
    image: "jrcs/letsencrypt-nginx-proxy-companion:latest"
    volumes:
        - "html:/usr/share/nginx/html"
        - "dhparam:/etc/nginx/dhparam"
        - "vhost:/etc/nginx/vhost.d"
        - "certs:/etc/nginx/certs"
        - "/run/docker.sock:/var/run/docker.sock:ro"
    environment:
        NGINX_PROXY_CONTAINER: "proxy"
        DEFAULT_EMAIL: ${EMAIL}
    restart: "always"
    depends_on:
        - "proxy"
    networks: 
        - "net"

volumes:
  certs:
  html:
  vhost:
  dhparam:

networks:
  net:
    external: true
  # nginx:
  #   container_name: nginx
  #   image: nginx:latest
  #   volumes:
  #     - ./deploy/nginx/templates:/etc/nginx/templates:ro
  #   environment:
  #     - DOMAIN_UI
  #     - DOMAIN_API

  # nginx:
  #   container_name: nginx
  #   image: nginx:latest
  #   restart: unless-stopped
  #   environment:
  #     - DOMAIN
  #   depends_on:
  #     - api
  #     - ui
  #   ports:
  #     - 80:80
  #     - 443:443
  #   volumes:
  #     - ./etc/nginx/templates:/etc/nginx/templates:ro
  #     - ./etc/letsencrypt:/etc/letsencrypt:ro
  #     - ./certbot/data:/var/www/certbot

  # certbot:
  #   container_name: certbot
  #   image: certbot/certbot:latest
  #   depends_on:
  #     - nginx
  #   command: >-
  #            certonly --reinstall --webroot --webroot-path=/var/www/certbot
  #            --email ${EMAIL} --agree-tos --no-eff-email
  #            -d ${DOMAIN}
  #   volumes:
  #     - ./etc/letsencrypt:/etc/letsencrypt
  #     - ./certbot/data:/var/www/certbot